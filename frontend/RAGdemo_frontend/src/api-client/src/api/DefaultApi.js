/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DBQueryModel from '../model/DBQueryModel';
import HTTPValidationError from '../model/HTTPValidationError';
import SubmitQueryRequest from '../model/SubmitQueryRequest';

/**
* Default service.
* @module api/DefaultApi
* @version 0.1.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getQueryEndpointGetQueryGet operation.
     * @callback module:api/DefaultApi~getQueryEndpointGetQueryGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DBQueryModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Query Endpoint
     * @param {String} queryId 
     * @param {module:api/DefaultApi~getQueryEndpointGetQueryGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DBQueryModel}
     */
    getQueryEndpointGetQueryGet(queryId, callback) {
      let postBody = null;
      // verify the required parameter 'queryId' is set
      if (queryId === undefined || queryId === null) {
        throw new Error("Missing the required parameter 'queryId' when calling getQueryEndpointGetQueryGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'query_id': queryId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DBQueryModel;
      return this.apiClient.callApi(
        '/get_query', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listQueryEndpointListQueriesPost operation.
     * @callback module:api/DefaultApi~listQueryEndpointListQueriesPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DBQueryModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Query Endpoint
     * @param {String} userId 
     * @param {module:api/DefaultApi~listQueryEndpointListQueriesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DBQueryModel>}
     */
    listQueryEndpointListQueriesPost(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling listQueryEndpointListQueriesPost");
      }

      let pathParams = {
      };
      let queryParams = {
        'user_id': userId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DBQueryModel];
      return this.apiClient.callApi(
        '/list_queries', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitQueryEndpointSubmitQueryPost operation.
     * @callback module:api/DefaultApi~submitQueryEndpointSubmitQueryPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DBQueryModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submit Query Endpoint
     * @param {module:model/SubmitQueryRequest} submitQueryRequest 
     * @param {module:api/DefaultApi~submitQueryEndpointSubmitQueryPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DBQueryModel}
     */
    submitQueryEndpointSubmitQueryPost(submitQueryRequest, callback) {
      let postBody = submitQueryRequest;
      // verify the required parameter 'submitQueryRequest' is set
      if (submitQueryRequest === undefined || submitQueryRequest === null) {
        throw new Error("Missing the required parameter 'submitQueryRequest' when calling submitQueryEndpointSubmitQueryPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DBQueryModel;
      return this.apiClient.callApi(
        '/submit_query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
